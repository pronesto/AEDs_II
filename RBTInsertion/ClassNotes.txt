* Self-Balancing Trees

? What's the worst-case complexity of each one of these operations on trees?
  ? Insert
  ? Remove
  ? Search


? What is the key metric that determines these complexities?


? If we decide to use a tree to sort numbers, what would be the complexity of
  our sorting routine?


? [treeSort1.c] Implement a tree-based sort algorithm:

int main(int argc, char** argv) {
  if (argc < 1) {
    fprintf(stderr, "Syntax: %s num_nodes", argv[0]);
  } else {
    clock_t start, end;
    Apontador D;
    Inicializa(&D);
    int i;
    const int MAX = atoi(argv[1]);
    start = clock();
    for (i = 0; i < MAX; i++) {
      Registro Reg;
      Reg.Chave = gen();
      Insere(Reg, &D);
    }
    end = clock();
    // Print the tree in dot format:
    Central(D, &print);
    printf("\nTime = %lf secs\n", ((double)(end - start))/CLOCKS_PER_SEC);
  }
}


? [treeSort1.c] Implement a gen() function that always produces keys in
  ascending order:

TipoChave gen() {
  static TipoChave t = 0;
  return t++;
}


? What is the meaning of 'static' in the program above?


? [treeSort2.c] try to get the times for inputs of different sizes:
for ((num_nodes = 100; num_nodes < 5000; num_nodes += 200))
do
  ./TimeTreeMain $num_nodes 0 > /dev/null ;
done

? What if we had guarantees that the height of the tree is at most h?


? What is a balanced tree?
  - An empty tree is balanced.
  - A tree T = (n, T1, T2) is balanced if:
    - T1 is balanced
    - T2 is balanced
    - the size difference between T1 and T2 is at most 1.


? What is the height h of a balanced tree with n elements?

% Red-Black Trees %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

==== Properties ====

1 Each node is either red or black.
2 All leaves are black.
3 If a node is red, then both its children are black.
4 Every path from a given node to any of its descendant NIL nodes contains the
  same number of black nodes.

? Can you show that "the path from the root to the farthest leaf is no more than twice as long as the path from the root to the nearest leaf."

For a redâ€“black tree T, let B be the number of black nodes in property 4.
Let the shortest possible path from the root of T to any leaf consist of B
black nodes. Longer possible paths may be constructed by inserting red nodes.
However, property 3 makes it impossible to insert more than one consecutive red
node. Therefore, ignoring any black NIL leaves, the longest possible path
consists of 2*B nodes, alternating black and red (this is the worst case).
Counting the black NIL leaves, the longest possible path consists of 2*B-1
nodes.

? How's the shortest possible path from root to leaf?

All black nodes.

? How's the longest possible path from root to leaf?

Alternation between red and black nodes

==== Implementation ====

? How would be the data-structure that describes nodes in a RB-Tree?

typedef enum ColorType {
    Red, Black
} ColorType;

typedef struct RedBlackNode *RedBlackTree;

struct RedBlackNode {
    ElementType Element;
    RedBlackTree Left;
    RedBlackTree Right;
    ColorType Color;
};


? How would you insert a new node in the RB-Tree, ensuring the key properties?
1. Nodes are inserted as Red
2. Nodes are inserted as leaves
3. Rotate nodes to preserve properties

* Show video of simple rotation in RBT:
https://www.youtube.com/watch?v=zomMSaA94Uk&t=8s

* Show video of Double Rotations in RBT:
https://www.youtube.com/watch?v=Qfqm4EuIs3w&t=22s


=== Playing with the Tree ===

? Can you implement a program to find the height of the RBT?

#define MAX(X, Y) ((X) > (Y) ? (X) : (Y))

int RBT_Height(RedBlackTree T) {
  int height_esq = 0;
  int height_dir = 0;
  if (!isNullNode(T->Left))
    height_esq = RBT_Height(T->Left);
  if (!isNullNode(T->Right))
    height_dir = RBT_Height(T->Right);
  return MAX(height_esq, height_dir) + 1;
}


? Could you compare it with the program that finds the height of a binary
  search tree?

int Tree_Height(Apontador T) {
  int height_esq = 0;
  int height_dir = 0;
  if (T->Esq)
    height_esq = Tree_Height(T->Esq);
  if (T->Dir)
    height_dir = Tree_Height(T->Dir);
  return MAX(height_esq, height_dir) + 1;
}